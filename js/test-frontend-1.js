/**
 * Привет! Перед тобой довольно интересное задание :)
 * По времени ты не ограничен, но его надо будет зафиксировать.
 * Время выполнения никак не скажется на результате оценки.
 * Желательно результат работы выложить на github.
 *
 * Задание:
 *
 * - Создать поле 6x4 (WxH) из 24х квадратов используя PixiJS (https://www.pixijs.com/)
 * - Написать алгоритм который будет рисовать на этом поле  (!) ломанные линии (!) через центры квадратов
 * - На вход можно подать как одну линию так и набор, все должны быть отрисованы разными цветами
 * - Вся сцена должна быть адаптивной и должна реагировать на resize окна
 * - Линии должны задаваться одномерным массивом вида [0,1,2,..,W], где
 *      индекс значения массива говорит о колонке на поле,
 *      а значение говорит о строке
 *
 * Примеры входящих параметров и подсветка тех квадратов, через которые должны пройти отдельные линии на поле:
 * ┌───────────────────────────────────────────────────────────────────────┐
 * │  ▆ ▆ ▆ ▆ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▆ ▆ ▆ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▆ ▢ ▆ ▢  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▆ ▆ ▆ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▆ ▆ ▆ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢  │
 * ├───────────────────────────────────────────────────────────────────────┤
 * │  ▆ ▢ ▆ ▢ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆   ▢ ▢ ▢ ▢ ▢ ▢  │
 * │  ▢ ▆ ▢ ▆ ▢ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆   ▆ ▢ ▆ ▢ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▆ ▢ ▆ ▢   ▆ ▢ ▆ ▢ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▢ ▆ ▢ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▆ ▢ ▆ ▢  │
 * ├───────────────────────────────────────────────────────────────────────┤
 * │  ▆ ▢ ▢ ▢ ▢ ▆   ▢ ▆ ▆ ▆ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▆ ▆ ▢ ▢  │
 * │  ▢ ▆ ▆ ▆ ▆ ▢   ▆ ▢ ▢ ▢ ▢ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▢ ▢ ▢ ▆   ▢ ▆ ▆ ▆ ▆ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▆ ▆ ▆ ▆ ▢   ▆ ▢ ▢ ▢ ▢ ▆   ▆ ▆ ▢ ▢ ▆ ▆  │
 * ├───────────────────────────────────────────────────────────────────────┤
 * │  ▆ ▆ ▢ ▢ ▆ ▆   ▆ ▆ ▢ ▢ ▆ ▆   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▆ ▆ ▢ ▢  │
 * │  ▢ ▢ ▆ ▆ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▆ ▢ ▢ ▢ ▢ ▆   ▢ ▆ ▢ ▢ ▆ ▢  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▆ ▆ ▢ ▢   ▢ ▆ ▢ ▢ ▆ ▢   ▆ ▢ ▢ ▢ ▢ ▆  │
 * │  ▢ ▢ ▢ ▢ ▢ ▢   ▢ ▢ ▆ ▆ ▢ ▢   ▆ ▆ ▢ ▢ ▆ ▆   ▢ ▢ ▆ ▆ ▢ ▢   ▢ ▢ ▢ ▢ ▢ ▢  │
 * └───────────────────────────────────────────────────────────────────────┘
 *
 * const lines = [
 *     [0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3],
 *     [1, 2, 1, 2, 1, 2], [0, 1, 0, 1, 0, 1], [2, 3, 2, 3, 2, 3], [2, 1, 2, 1, 2, 1],
 *     [1, 0, 1, 0, 1, 0], [3, 2, 3, 2, 3, 2], [0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1],
 *     [2, 3, 3, 3, 3, 2], [3, 2, 2, 2, 2, 3], [3, 3, 0, 0, 3, 3], [0, 0, 1, 1, 0, 0],
 *     [0, 0, 3, 3, 0, 0], [3, 3, 2, 2, 3, 3], [1, 2, 3, 3, 2, 1], [2, 1, 0, 0, 1, 2]
 * ]
 *
 * Пиши аккуратно, перед коммитом перечитай еще раз свой код ;)
 *
 * Желаю удачи!
 */

// import * as PIXI from "pixi.js";

const lines = [
  [0, 0, 0, 0, 0, 0],
  [1, 1, 1, 1, 1, 1],
  [2, 2, 2, 2, 2, 2],
  [3, 3, 3, 3, 3, 3],
  [1, 2, 1, 2, 1, 2],
  [0, 1, 0, 1, 0, 1],
  [2, 3, 2, 3, 2, 3],
  [2, 1, 2, 1, 2, 1],
  [1, 0, 1, 0, 1, 0],
  [3, 2, 3, 2, 3, 2],
  [0, 1, 1, 1, 1, 0],
  [1, 0, 0, 0, 0, 1],
  [2, 3, 3, 3, 3, 2],
  [3, 2, 2, 2, 2, 3],
  [3, 3, 0, 0, 3, 3],
  [0, 0, 1, 1, 0, 0],
  [0, 0, 3, 3, 0, 0],
  [3, 3, 2, 2, 3, 3],
  [1, 2, 3, 3, 2, 1],
  [2, 1, 0, 0, 1, 2],
];

function renderPlaceTaken(app, data) {
  data.forEach((element, i) => {
    const placeTaken = new PIXI.Graphics();
    placeTaken.lineStyle(2, 0xffffff, 1);
    placeTaken.beginFill(0x000000);
    placeTaken.drawRect(50, 50, 50, 50);
    placeTaken.endFill();

    app.stage.addChild(placeTaken);
    placeTaken.x = i * 100;
    placeTaken.y = element * 100;
  });
}

function renderPlaceFree(app, rowcount = 0) {
  let column = 6;
  let row = 3;
  if (rowcount > row) {
    return;
  }

  for (let i = 0; i < column; i++) {
    const placeFree = new PIXI.Graphics();
    placeFree.lineStyle(2, 0xffffff, 1);
    placeFree.drawRect(50, 50, 50, 50);
    placeFree.endFill();

    app.stage.addChild(placeFree);
    placeFree.x = i * 100;
    placeFree.y = rowcount * 100;
    if (i === 5) {
      rowcount += 1;
      renderPlaceFree(app, rowcount);
    }
  }
}

function cinemaSeats(data) {
  data.forEach((element, index) => {
    let app = new PIXI.Application({
      width: 650,
      height: 450,
      backgroundColor: 0x1099bb,
      resolution: 1,
    });

    document.body.appendChild(app.view);

    renderPlaceTaken(app, element);
    renderPlaceFree(app, 0);
  });
}

cinemaSeats(lines);
